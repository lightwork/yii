!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Alpha	Alpha.php	/^class Alpha$/;"	c
Anonymous	Anonymous.php	/^class Anonymous$/;"	c
Call	Call.php	/^class Call$/;"	c
Color	Color.php	/^class Color$/;"	c
Combinator	Combinator.php	/^class Combinator$/;"	c
Comment	Comment.php	/^class Comment$/;"	c
Dimension	Dimension.php	/^class Dimension$/;"	c
Directive	Directive.php	/^class Directive$/;"	c
Element	Element.php	/^class Element$/;"	c
Expression	Expression.php	/^class Expression$/;"	c
Import	Import.php	/^class Import$/;"	c
Javascript	Javascript.php	/^class Javascript$/;"	c
Keyword	Keyword.php	/^class Keyword$/;"	c
Operation	Operation.php	/^class Operation$/;"	c
Quoted	Quoted.php	/^class Quoted$/;"	c
Rule	Rule.php	/^class Rule$/;"	c
Ruleset	Ruleset.php	/^class Ruleset$/;"	c
Selector	Selector.php	/^class Selector$/;"	c
Shorthand	Shorthand.php	/^class Shorthand$/;"	c
Url	Url.php	/^class Url$/;"	c
Value	Value.php	/^class Value$/;"	c
Variable	Variable.php	/^class Variable$/;"	c
__construct	Alpha.php	/^    public function __construct($val)$/;"	f
__construct	Anonymous.php	/^    public function __construct($value)$/;"	f
__construct	Call.php	/^    public function __construct($name, $args, $index)$/;"	f
__construct	Color.php	/^    public function __construct($rgb, $a = 1)$/;"	f
__construct	Combinator.php	/^    public function __construct($value = '')$/;"	f
__construct	Comment.php	/^    public function __construct($value, $silent)$/;"	f
__construct	Dimension.php	/^    public function __construct($value, $unit = false)$/;"	f
__construct	Directive.php	/^    public function __construct($name, $value)$/;"	f
__construct	Element.php	/^    public function __construct($combinator, $value = '')$/;"	f
__construct	Expression.php	/^    public function __construct($value)$/;"	f
__construct	Import.php	/^    public function __construct($path, $includeDir = '', $env = null)$/;"	f
__construct	Javascript.php	/^    public function __construct($string, $index, $escaped)$/;"	f
__construct	Keyword.php	/^    public function __construct($value)$/;"	f
__construct	Operation.php	/^    public function __construct($op, $operands)$/;"	f
__construct	Quoted.php	/^    public function __construct($str, $content, $escaped = false, $i = false)$/;"	f
__construct	Rule.php	/^    public function __construct($name, $value, $important = null, $index = null)$/;"	f
__construct	Ruleset.php	/^    public function __construct($selectors, $rules)$/;"	f
__construct	Selector.php	/^    public function __construct($elements)$/;"	f
__construct	Shorthand.php	/^    public function __construct($a, $b)$/;"	f
__construct	Url.php	/^    public function __construct($value, $paths)$/;"	f
__construct	Value.php	/^    public function __construct($value)$/;"	f
__construct	Variable.php	/^    public function __construct($name, $index)$/;"	f
__toString	Dimension.php	/^    public function __toString()$/;"	f
_css	Selector.php	/^        $this->_css = array_map(function ($e) use ($env) {$/;"	v
_css	Selector.php	/^        $this->_css = implode('', $this->_css);$/;"	v
_css	Selector.php	/^    private $_css;$/;"	v
_path	Import.php	/^        $this->_path = $path;$/;"	v
_rulesets	Ruleset.php	/^    private $_rulesets;$/;"	v
_variables	Ruleset.php	/^            $this->_variables = array_reduce($this->rules, function ($hash, $r) {$/;"	v
_variables	Ruleset.php	/^    private $_variables;$/;"	v
a	Color.php	/^        $a = $this->alpha;$/;"	v
a	Operation.php	/^                $a = $temp;$/;"	v
a	Operation.php	/^        $a = $this->operands[0]->compile($env);$/;"	v
a	Shorthand.php	/^        $this->a = $a;$/;"	v
after	Ruleset.php	/^        $after = array();$/;"	v
afterElements	Ruleset.php	/^            $afterElements = $beforeElements;$/;"	v
afterElements	Ruleset.php	/^        $afterElements = array();$/;"	v
alpha	Color.php	/^        $this->alpha = is_numeric($a) ? $a : 1;$/;"	v
argb	Color.php	/^        $argb = array_merge( (array) round($this->alpha * 255), $this->rgb);$/;"	v
args	Call.php	/^        $args = array_map(function ($a) use($env) {$/;"	v
args	Call.php	/^        $this->args = $args;$/;"	v
attrs	Url.php	/^            $this->attrs = $value;$/;"	v
attrs	Url.php	/^    public $attrs;$/;"	v
b	Color.php	/^        $b = $this->rgb[2] \/ 255;$/;"	v
b	Operation.php	/^                $b = $a;$/;"	v
b	Operation.php	/^        $b = $this->operands[1]->compile($env);$/;"	v
b	Shorthand.php	/^        $this->b = $b;$/;"	v
before	Ruleset.php	/^        $before = array();$/;"	v
beforeElements	Ruleset.php	/^            $beforeElements = array();$/;"	v
beforeElements	Ruleset.php	/^        $beforeElements = array();$/;"	v
callback	Variable.php	/^        $callback = function ($frame) use ($env, $name) {$/;"	v
combinator	Element.php	/^            $combinator = new Combinator($combinator);$/;"	v
combinator	Element.php	/^        $this->combinator = $combinator;$/;"	v
combinator	Element.php	/^    public $combinator;$/;"	v
compile	Alpha.php	/^    public function compile($env)$/;"	f
compile	Anonymous.php	/^    public function compile($env)$/;"	f
compile	Call.php	/^    public function compile($env)$/;"	f
compile	Color.php	/^    public function compile($env = null)$/;"	f
compile	Comment.php	/^    public function compile($env = null)$/;"	f
compile	Dimension.php	/^    public function compile($env = null) {$/;"	f
compile	Directive.php	/^    public function compile($env)$/;"	f
compile	Expression.php	/^    public function compile($env) {$/;"	f
compile	Import.php	/^    public function compile($env)$/;"	f
compile	Javascript.php	/^    public function compile($env)$/;"	f
compile	Keyword.php	/^    public function compile($env)$/;"	f
compile	Operation.php	/^    public function compile($env)$/;"	f
compile	Quoted.php	/^    public function compile($env)$/;"	f
compile	Rule.php	/^    public function compile ($context)$/;"	f
compile	Ruleset.php	/^    public function compile($env)$/;"	f
compile	Shorthand.php	/^    public function compile($env)$/;"	f
compile	Url.php	/^    public function compile($ctx)$/;"	f
compile	Value.php	/^    public function compile($env)$/;"	f
compile	Variable.php	/^    public function compile($env)$/;"	f
content	Quoted.php	/^    public $content;$/;"	v
css	Import.php	/^        $this->css = preg_match('\/css(\\?.*)?$\/', $this->path);$/;"	v
css	Ruleset.php	/^        $css = array();      \/\/ The CSS output$/;"	v
d	Color.php	/^        $d = $max - $min;$/;"	v
elements	Selector.php	/^        $this->elements = $elements;$/;"	v
elements	Selector.php	/^    public $elements;$/;"	v
escaped	Javascript.php	/^        $this->escaped = $escaped;$/;"	v
escaped	Quoted.php	/^        $this->escaped = $escaped;$/;"	v
escaped	Quoted.php	/^    public $escaped;$/;"	v
expression	Javascript.php	/^        $this->expression = $string;$/;"	v
find	Directive.php	/^    public function find($selector)$/;"	f
find	Ruleset.php	/^    public function find ($selector, $self = null, $env = null)$/;"	f
g	Color.php	/^        $g = $this->rgb[1] \/ 255;$/;"	v
h	Color.php	/^            $h = $s = 0;$/;"	v
hasParentSelector	Ruleset.php	/^                $hasParentSelector = true;$/;"	v
hasParentSelector	Ruleset.php	/^        $hasParentSelector = false;$/;"	v
i	Color.php	/^                $i = ($i > 255 ? 255 : ($i < 0 ? 0 : $i));$/;"	v
i	Color.php	/^                $i = dechex($i);$/;"	v
i	Color.php	/^                $i = round($i);$/;"	v
i	Color.php	/^            $i = dechex($i > 255 ? 255 : ($i < 0 ? 0 : $i));$/;"	v
i	Color.php	/^            $i = round($i);$/;"	v
important	Rule.php	/^        $this->important = $important ? ' ' . trim($important) : '';$/;"	v
index	Call.php	/^        $this->index = $index;$/;"	v
index	Javascript.php	/^        $this->index = $index;$/;"	v
index	Quoted.php	/^        $this->index = $i;$/;"	v
index	Rule.php	/^        $this->index = $index;$/;"	v
index	Variable.php	/^        $this->index = $index;$/;"	v
is	Value.php	/^        $this->is = 'value';$/;"	v
joinSelector	Ruleset.php	/^    public function joinSelector (&$paths, $context, $selector)$/;"	f
joinSelectors	Ruleset.php	/^    public function joinSelectors (&$paths, $context, $selectors)$/;"	f
js	Quoted.php	/^                    $js = \\Less\\Node\\JavaScript($matches[1], $that->index, true);$/;"	v
key	Ruleset.php	/^        $key = $selector->toCSS($env);$/;"	v
l	Color.php	/^        $l = ($max + $min) \/ 2;$/;"	v
len	Selector.php	/^        $len   = count($this->elements);$/;"	v
less	Import.php	/^            $less = $includeDir . '\/' . $this->path;$/;"	v
lookups	Ruleset.php	/^        $this->lookups = array();$/;"	v
lookups	Ruleset.php	/^    protected $lookups;$/;"	v
match	Ruleset.php	/^    public function match($args)$/;"	f
match	Selector.php	/^    public function match ($other)$/;"	f
max	Color.php	/^        $max = max($r, $g, $b);$/;"	v
max	Selector.php	/^        $max = min($len, $olen);$/;"	v
min	Color.php	/^        $min = min($r, $g, $b);$/;"	v
name	Call.php	/^        $name = $this->name == '%' ? '_percent' : $this->name;$/;"	v
name	Call.php	/^        $this->name = $name;$/;"	v
name	Directive.php	/^        $this->name = $name;$/;"	v
name	Directive.php	/^    public $name;$/;"	v
name	Rule.php	/^        $this->name = $name;$/;"	v
name	Variable.php	/^            $name = '@' . $v->compile($env)->value;$/;"	v
name	Variable.php	/^        $name = $this->name;$/;"	v
name	Variable.php	/^        $this->name = $name;$/;"	v
newRules	Import.php	/^                    $newRules = $ruleset->rules[$i]->compile($env);$/;"	v
newRules	Ruleset.php	/^                    $newRules = $ruleset->rules[$i]->compile($env);$/;"	v
newRules	Ruleset.php	/^                $newRules = $ruleset->rules[$i]->compile($env);$/;"	v
olen	Selector.php	/^        $olen  = count($other->elements);$/;"	v
op	Operation.php	/^        $this->op = trim($op);$/;"	v
operands	Operation.php	/^        $this->operands = $operands;$/;"	v
operate	Color.php	/^    public function operate($op, $other) {$/;"	f
operate	Dimension.php	/^    public function operate($op, $other)$/;"	f
other	Color.php	/^            $other = $other->toColor();$/;"	v
parser	Import.php	/^            $parser = new \\Less\\Parser($env);$/;"	v
path	Import.php	/^            $this->path = isset($path->value->value) ? $path->value->value : $path->value;$/;"	v
path	Import.php	/^            $this->path = preg_match('\/\\.(le?|c)ss(\\?.*)?$\/', $path->value) ? $path->value : $path->value . '.less';$/;"	v
paths	Ruleset.php	/^                $paths = array_map(function ($s) { return array($s); }, $this->selectors);$/;"	v
paths	Ruleset.php	/^        $paths = array();    \/\/ Current selectors$/;"	v
paths	Url.php	/^            $this->paths = $paths;$/;"	v
paths	Url.php	/^    public $paths;$/;"	v
quote	Quoted.php	/^        $this->quote = $str[0];$/;"	v
r	Color.php	/^        $r = $this->rgb[0] \/ 255;$/;"	v
result	Color.php	/^        $result = array();$/;"	v
rgb	Color.php	/^            $this->rgb = $rgb;$/;"	v
rgb	Color.php	/^            $this->rgb = array_map(function($c) { return hexdec($c); }, str_split($rgb, 2));$/;"	v
rgb	Color.php	/^            $this->rgb = array_map(function($c) { return hexdec($c.$c); }, str_split($rgb, 1));$/;"	v
root	Import.php	/^            $this->root = $parser->parseFile($less, true);$/;"	v
root	Ruleset.php	/^    public $root;$/;"	v
rules	Ruleset.php	/^                            $rules = array_merge($rules, $rule->find( new \\Less\\Node\\Selector(array_slice($selector->elements, 1)), $self, $env));$/;"	v
rules	Ruleset.php	/^        $rules = array();    \/\/ node.Rule instances$/;"	v
rules	Ruleset.php	/^        $rules = array();$/;"	v
rules	Ruleset.php	/^        $this->rules = (array) $rules;$/;"	v
rules	Ruleset.php	/^    public $rules;$/;"	v
ruleset	Directive.php	/^            $this->ruleset = new Ruleset(false, $value);$/;"	v
ruleset	Directive.php	/^        $this->ruleset = $this->ruleset ? $this->ruleset->compile($env) : null;$/;"	v
ruleset	Directive.php	/^    public $ruleset;$/;"	v
ruleset	Import.php	/^            $ruleset = new \\Less\\Node\\Ruleset(null, isset($this->root->rules) ? $this->root->rules : array());$/;"	v
ruleset	Ruleset.php	/^        $ruleset = new Ruleset($this->selectors, $this->rules);$/;"	v
rulesets	Directive.php	/^    public function rulesets()$/;"	f
rulesets	Ruleset.php	/^        $rulesets = array(); \/\/ node.Ruleset instances$/;"	v
rulesets	Ruleset.php	/^        $rulesets = implode('', $rulesets);$/;"	v
rulesets	Ruleset.php	/^    public function rulesets ()$/;"	f
s	Color.php	/^            $s = $l > 0.5 ? $d \/ (2 - $max - $min) : $d \/ ($max + $min);$/;"	v
selector	Ruleset.php	/^                $selector = array_map(function ($p) use ($env) {$/;"	v
selector	Ruleset.php	/^                $selector = implode($env->compress ? ',' : (count($paths) > 3 ? ",\\n" : ', '), $selector);$/;"	v
selectors	Ruleset.php	/^        $this->selectors = $selectors;$/;"	v
selectors	Ruleset.php	/^    public $selectors;$/;"	v
self	Ruleset.php	/^        $self = $self ?: $this;$/;"	v
silent	Comment.php	/^        $this->silent = !! $silent;$/;"	v
temp	Operation.php	/^                $temp = $b;$/;"	v
that	Quoted.php	/^        $that = $this;$/;"	v
toARGB	Color.php	/^    public function toARGB()$/;"	f
toCSS	Call.php	/^    public function toCSS ($env) {$/;"	f
toCSS	Color.php	/^    public function toCSS()$/;"	f
toCSS	Combinator.php	/^    public function toCSS ($env)$/;"	f
toCSS	Comment.php	/^    public function toCSS($env)$/;"	f
toCSS	Dimension.php	/^    public function toCSS()$/;"	f
toCSS	Directive.php	/^    public function toCSS($ctx, $env)$/;"	f
toCSS	Element.php	/^    public function toCSS ($env)$/;"	f
toCSS	Expression.php	/^    public function toCSS ($env) {$/;"	f
toCSS	Import.php	/^    public function toCSS()$/;"	f
toCSS	Quoted.php	/^    public function toCSS ()$/;"	f
toCSS	Rule.php	/^    public function toCSS ($env)$/;"	f
toCSS	Ruleset.php	/^    public function toCSS ($context, $env)$/;"	f
toCSS	Selector.php	/^    public function toCSS ($env)$/;"	f
toCSS	Url.php	/^    public function toCSS()$/;"	f
toCSS	Value.php	/^    public function toCSS ($env)$/;"	f
toColor	Dimension.php	/^    public function toColor() {$/;"	f
toCss	Alpha.php	/^    public function toCss($env)$/;"	f
toCss	Anonymous.php	/^    public function toCss()$/;"	f
toCss	Javascript.php	/^    public function toCss($env)$/;"	f
toCss	Keyword.php	/^    public function toCss()$/;"	f
toCss	Shorthand.php	/^    public function toCss($env)$/;"	f
toHSL	Color.php	/^    public function toHSL()$/;"	f
unit	Dimension.php	/^        $this->unit = $unit;$/;"	v
v	Combinator.php	/^        $v = array($/;"	v
v	Quoted.php	/^                    $v = $v->compile($env);$/;"	v
v	Quoted.php	/^                    $v = new \\Less\\Node\\Variable('@' . $matches[1], $that->index);$/;"	v
v	Variable.php	/^            $v = new \\Less\\Node\\Variable(substr($name, 1), $this->index + 1);$/;"	v
value	Alpha.php	/^            $this->value = $this->value->compile($env);$/;"	v
value	Alpha.php	/^        $this->value = $val;$/;"	v
value	Alpha.php	/^    private $value;$/;"	v
value	Anonymous.php	/^        $this->value = is_string($value) ? $value : $value->value;$/;"	v
value	Anonymous.php	/^    public $value;$/;"	v
value	Call.php	/^    private $value;$/;"	v
value	Combinator.php	/^            $this->value = ' ';$/;"	v
value	Combinator.php	/^            $this->value = '& ';$/;"	v
value	Combinator.php	/^            $this->value = trim($value);$/;"	v
value	Combinator.php	/^    public $value;$/;"	v
value	Comment.php	/^        $this->value = $value;$/;"	v
value	Dimension.php	/^        $this->value = floatval($value);$/;"	v
value	Directive.php	/^            $this->value = $value;$/;"	v
value	Directive.php	/^    public $value;$/;"	v
value	Element.php	/^        $this->value = trim($value);$/;"	v
value	Element.php	/^    public $value;$/;"	v
value	Expression.php	/^        $this->value = $value;$/;"	v
value	Keyword.php	/^        $this->value = $value;$/;"	v
value	Quoted.php	/^        $this->value = $content ?: '';$/;"	v
value	Quoted.php	/^        $value = preg_replace_callback('\/@\\{([\\w-]+)\\}\/', function ($matches) use ($env, $that) {$/;"	v
value	Quoted.php	/^        $value = preg_replace_callback('\/`([^`]+)`\/', function ($matches) use ($env, $that) {$/;"	v
value	Rule.php	/^        $this->value = ($value instanceof \\Less\\Node\\Value) ? $value : new \\Less\\Node\\Value(array($value));$/;"	v
value	Url.php	/^            $this->value = $value;$/;"	v
value	Url.php	/^    public $value;$/;"	v
value	Value.php	/^        $this->value = $value;$/;"	v
values	Color.php	/^            $values = array_map(function ($c) {$/;"	v
variable	Directive.php	/^    public function variable($name)$/;"	f
variable	Rule.php	/^            $this->variable = false;$/;"	v
variable	Rule.php	/^            $this->variable = true;$/;"	v
variable	Ruleset.php	/^    public function variable($name)$/;"	f
variables	Ruleset.php	/^    public function variables()$/;"	f
vars	Ruleset.php	/^        $vars = $this->variables();$/;"	v
